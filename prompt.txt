# Customer Support Dashboard - Frontend Implementation Guide

## API Integration Specification

### 1. Fetch User's Tickets
```typescript
// GET /api/tickets
interface TicketRequest {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  },
  query?: {
    page?: number;          // Default: 1
    limit?: number;         // Default: 10
    sort_field?: string;    // Default: 'created_at'
    sort_direction?: 'asc' | 'desc';  // Default: 'desc'
  }
}

interface TicketResponse {
  status: 'success';
  data: Array<{
    id: string;
    title: string;
    description: string;
    status: 'open' | 'pending' | 'resolved';
    priority: 'low' | 'medium' | 'high';
    created_by: {
      id: string;
      full_name: string;
      email: string;
      role: string;
    };
    assigned_to?: {
      id: string;
      full_name: string;
      email: string;
      role: string;
    };
    organization_id: string;
    team_id?: string;
    tags: string[];
    metadata: Record<string, any>;
    first_response_at?: string;
    resolved_at?: string;
    satisfaction_rating?: number;
    satisfaction_comment?: string;
    created_at: string;
    updated_at: string;
    queue_id?: string;
    sla_policy_id?: string;
    first_response_due_at?: string;
    resolution_due_at?: string;
    sla_status: {
      first_response: 'pending' | 'met' | 'breached';
      resolution: 'pending' | 'met' | 'breached';
    };
    comments: Array<{
      id: string;
      content: string;
      created_by: string;
      internal_only: boolean;
      created_at: string;
      updated_at: string;
    }>;
  }>;
  pagination: {
    page: number;
    limit: number;
    total: number;
    total_pages: number;
  };
}

// Example API call with pagination and sorting
const fetchUserTickets = async (
  page = 1,
  limit = 10,
  sortField = 'created_at',
  sortDirection: 'asc' | 'desc' = 'desc'
) => {
  const params = new URLSearchParams({
    page: page.toString(),
    limit: limit.toString(),
    sort_field: sortField,
    sort_direction: sortDirection
  });

  const response = await fetch(`/api/tickets?${params}`, {
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    }
  });

  if (!response.ok) {
    throw new Error('Failed to fetch tickets');
  }

  const data: TicketResponse = await response.json();
  return data;
};
```

### 2. Create New Ticket
```typescript
// POST /api/tickets
interface CreateTicketRequest {
  method: 'POST';
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
  body: {
    title: string;
    description: string;
    priority: 'low' | 'medium' | 'high';
    tags?: string[];
  };
}

// Example API call
const createTicket = async (ticketData: CreateTicketRequest['body']) => {
  const response = await fetch('/api/tickets', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(ticketData)
  });

  if (!response.ok) {
    throw new Error('Failed to create ticket');
  }

  return await response.json();
};
```

## Required UI Components

### 1. Ticket List View
```typescript
interface TicketListProps {
  tickets: TicketResponse['data'];
  isLoading: boolean;
  error?: string;
}

// Status Badge Colors
const STATUS_COLORS = {
  open: '#1976D2',     // Blue
  pending: '#FB8C00',  // Orange
  resolved: '#43A047'  // Green
};

// Priority Badge Colors
const PRIORITY_COLORS = {
  high: '#E53935',     // Red
  medium: '#FB8C00',   // Orange
  low: '#43A047'       // Green
};
```

### 2. Loading States
```typescript
interface LoadingState {
  isLoading: boolean;
  isError: boolean;
  error?: string;
  retry: () => void;
}
```

## Implementation Requirements

### 1. Initial Load
```typescript
// On component mount
useEffect(() => {
  const loadTickets = async () => {
    setIsLoading(true);
    try {
      const response = await fetchUserTickets();
      setTickets(response.data);
      setCount(response.count);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  loadTickets();
}, []);
```

### 2. Auto-Refresh Logic
```typescript
// Refresh tickets every 30 seconds
useEffect(() => {
  const interval = setInterval(async () => {
    try {
      const response = await fetchUserTickets();
      setTickets(response.data);
      setCount(response.count);
    } catch (error) {
      console.error('Auto-refresh failed:', error);
    }
  }, 30000);

  return () => clearInterval(interval);
}, []);
```

### 3. Error Handling
```typescript
interface ErrorState {
  type: 'auth' | 'network' | 'server' | 'unknown';
  message: string;
  action?: () => void;
}

const handleError = (error: any): ErrorState => {
  if (error.status === 401) {
    return {
      type: 'auth',
      message: 'Please log in again',
      action: () => handleLogout()
    };
  }
  // Add other error handling cases
};
```

## Required Features

1. Ticket List Display:
   - Sortable columns (created_at, status, priority)
   - Filterable by status and priority
   - Clickable rows for ticket details
   - Status and priority badges with correct colors
   - Timestamp formatting in user's timezone

2. Create Ticket Form:
   - Title input (required)
   - Description textarea (required)
   - Priority selection
   - Tags input (optional)
   - Submit button with loading state

3. Real-time Updates:
   - Periodic polling (30s interval)
   - Optimistic updates on ticket creation
   - Error recovery mechanisms

4. Error Handling:
   - Network error recovery
   - Authentication error handling
   - Validation error display
   - Retry mechanisms

## Component Structure

```typescript
// Main Dashboard Layout
<DashboardLayout>
  <TicketHeader>
    <Title>Your Tickets</Title>
    <CreateTicketButton onClick={openCreateModal} />
  </TicketHeader>

  <TicketFilters>
    <StatusFilter />
    <PriorityFilter />
    <SearchInput />
  </TicketFilters>

  <TicketList
    tickets={tickets}
    isLoading={isLoading}
    error={error}
    onRetry={handleRetry}
  />

  <CreateTicketModal
    isOpen={isModalOpen}
    onClose={closeModal}
    onSubmit={handleCreateTicket}
  />
</DashboardLayout>
```

## State Management

```typescript
interface TicketState {
  tickets: TicketResponse['data'];
  isLoading: boolean;
  error?: string;
  filters: {
    status?: ('open' | 'pending' | 'resolved')[];
    priority?: ('high' | 'medium' | 'low')[];
    search?: string;
  };
  sort: {
    field: keyof TicketResponse['data'][0];
    direction: 'asc' | 'desc';
  };
}
```

## Important Notes

1. Authentication:
   - Always include the JWT token in requests
   - Handle token expiration gracefully
   - Redirect to login when unauthorized

2. Performance:
   - Implement request debouncing for filters
   - Cache responses (5-minute TTL)
   - Lazy load ticket details

3. Error Recovery:
   - Implement exponential backoff for retries
   - Show user-friendly error messages
   - Provide retry buttons where appropriate

4. User Experience:
   - Show loading skeletons during initial load
   - Animate status changes
   - Provide feedback for all actions
   - Maintain state during navigation

Follow these specifications to ensure proper integration with the backend API and provide a seamless user experience. 

Frontend Implementation Guide: Customer Dashboard Ticket Fetching

As the lead backend developer, I'm providing specifications for implementing ticket fetching in the customer dashboard. Please follow these requirements carefully to ensure proper integration with our API.

1. API ENDPOINT SPECIFICATION
   GET /api/tickets
   
   Query Parameters:
   - page (number, optional, default: 1) - The page number for pagination
   - limit (number, optional, default: 10) - Number of tickets per page
   - sort_field (string, optional, default: 'created_at') - Field to sort by
     - Allowed values: 'created_at', 'updated_at', 'status', 'priority', 'title'
   - sort_direction (string, optional, default: 'desc') - Sort direction
     - Allowed values: 'asc', 'desc'

   Headers Required:
   - Authorization: Bearer {jwt_token}
   - Content-Type: application/json

2. RESPONSE FORMAT
   ```typescript
   interface TicketResponse {
     status: 'success';
     data: Array<{
       id: string;
       title: string;
       description: string;
       status: 'open' | 'in_progress' | 'resolved';
       priority: 'low' | 'medium' | 'high';
       created_at: string;
       updated_at: string;
       created_by: {
         id: string;
         full_name: string;
         email: string;
       };
       assigned_to: {
         id: string;
         full_name: string;
         email: string;
       } | null;
       comments: Array<{
         id: string;
         content: string;
         created_at: string;
         created_by: {
           id: string;
           full_name: string;
         };
       }>;
     }>;
     pagination: {
       page: number;
       limit: number;
       total: number;
       total_pages: number;
     };
   }
   ```

3. IMPLEMENTATION REQUIREMENTS
   a. Authentication:
      - Ensure the JWT token is included in every request
      - Handle 401 errors by redirecting to login
      - Refresh token if needed using Supabase client

   b. Error Handling:
      - 400: Invalid parameters (show appropriate error message)
      - 401: Unauthorized (redirect to login)
      - 403: Forbidden (show access denied message)
      - 500: Server error (show friendly error message)

   c. State Management:
      ```typescript
      interface TicketListState {
        tickets: Ticket[];
        isLoading: boolean;
        error: string | null;
        pagination: {
          currentPage: number;
          totalPages: number;
          totalItems: number;
          itemsPerPage: number;
        };
        sorting: {
          field: string;
          direction: 'asc' | 'desc';
        };
      }
      ```

4. EXAMPLE IMPLEMENTATION
   ```typescript
   const fetchTickets = async (
     page = 1,
     limit = 10,
     sortField = 'created_at',
     sortDirection = 'desc'
   ) => {
     try {
       setIsLoading(true);
       console.log('Fetching tickets with params:', { page, limit, sortField, sortDirection });
       
       const response = await fetch(
         `/api/tickets?page=${page}&limit=${limit}&sort_field=${sortField}&sort_direction=${sortDirection}`,
         {
           headers: {
             'Authorization': `Bearer ${session?.access_token}`,
             'Content-Type': 'application/json'
           }
         }
       );

       console.log('Response status:', response.status);
       const responseText = await response.text();
       console.log('Raw response:', responseText);

       if (!response.ok) {
         if (response.status === 401) {
           console.error('Unauthorized access');
           router.push('/login');
           return;
         }
         throw new Error(`Failed to fetch tickets: ${response.status} ${responseText}`);
       }

       // Try parsing the response text
       let data;
       try {
         data = JSON.parse(responseText) as TicketResponse;
       } catch (parseError) {
         console.error('Failed to parse response:', parseError);
         throw new Error('Invalid response format from server');
       }

       console.log('Parsed response data:', data);

       // Verify the data structure
       if (!data.data || !Array.isArray(data.data)) {
         console.error('Invalid data structure:', data);
         throw new Error('Invalid response structure from server');
       }

       return {
         tickets: data.data,
         pagination: data.pagination
       };
     } catch (error) {
       console.error('Error in fetchTickets:', error);
       throw error;
     } finally {
       setIsLoading(false);
     }
   };
   ```

5. IMPORTANT NOTES
   - Always handle loading states to show appropriate UI feedback
   - Implement error boundaries for graceful error handling
   - Use proper TypeScript types for type safety
   - Implement proper client-side caching to minimize API calls
   - Add retry logic for failed requests
   - Implement proper loading skeletons for better UX
   - Use proper debouncing for sorting/filtering changes

6. TESTING REQUIREMENTS
   - Test error scenarios (401, 403, 500)
   - Test pagination logic
   - Test sorting functionality
   - Test loading states
   - Test error message display
   - Test empty state handling

Please ensure all these requirements are met in the implementation. The customer dashboard should provide a smooth experience for viewing and managing tickets while properly handling all edge cases and error scenarios. 